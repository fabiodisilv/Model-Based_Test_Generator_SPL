/*
 * generated by Xtext 2.21.0
 */
package se.mdh.dva501.testsuite.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import se.mdh.dva501.testsuite.services.TestSuiteGrammarAccess;
import se.mdh.dva501.testsuite.testSuite.Check;
import se.mdh.dva501.testsuite.testSuite.Force;
import se.mdh.dva501.testsuite.testSuite.ProductCheck;
import se.mdh.dva501.testsuite.testSuite.ProductException;
import se.mdh.dva501.testsuite.testSuite.ProductForce;
import se.mdh.dva501.testsuite.testSuite.ProductSet;
import se.mdh.dva501.testsuite.testSuite.ProductTestCase;
import se.mdh.dva501.testsuite.testSuite.ProductUnforce;
import se.mdh.dva501.testsuite.testSuite.ProductValueException;
import se.mdh.dva501.testsuite.testSuite.Signal;
import se.mdh.dva501.testsuite.testSuite.TestCase;
import se.mdh.dva501.testsuite.testSuite.TestSuite;
import se.mdh.dva501.testsuite.testSuite.TestSuitePackage;
import se.mdh.dva501.testsuite.testSuite.Timeout;
import se.mdh.dva501.testsuite.testSuite.Unforce;
import se.mdh.dva501.testsuite.testSuite.Value;

@SuppressWarnings("all")
public class TestSuiteSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TestSuiteGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TestSuitePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TestSuitePackage.CHECK:
				sequence_Check(context, (Check) semanticObject); 
				return; 
			case TestSuitePackage.FORCE:
				sequence_Force(context, (Force) semanticObject); 
				return; 
			case TestSuitePackage.PRODUCT_CHECK:
				sequence_ProductCheck(context, (ProductCheck) semanticObject); 
				return; 
			case TestSuitePackage.PRODUCT_EXCEPTION:
				sequence_ProductException(context, (ProductException) semanticObject); 
				return; 
			case TestSuitePackage.PRODUCT_FORCE:
				sequence_ProductForce(context, (ProductForce) semanticObject); 
				return; 
			case TestSuitePackage.PRODUCT_SET:
				sequence_ProductSet(context, (ProductSet) semanticObject); 
				return; 
			case TestSuitePackage.PRODUCT_TEST_CASE:
				sequence_ProductTestCase(context, (ProductTestCase) semanticObject); 
				return; 
			case TestSuitePackage.PRODUCT_UNFORCE:
				sequence_ProductUnforce(context, (ProductUnforce) semanticObject); 
				return; 
			case TestSuitePackage.PRODUCT_VALUE_EXCEPTION:
				sequence_ProductValueException(context, (ProductValueException) semanticObject); 
				return; 
			case TestSuitePackage.SET:
				sequence_Set(context, (se.mdh.dva501.testsuite.testSuite.Set) semanticObject); 
				return; 
			case TestSuitePackage.SIGNAL:
				sequence_Signal(context, (Signal) semanticObject); 
				return; 
			case TestSuitePackage.TEST_CASE:
				sequence_TestCase(context, (TestCase) semanticObject); 
				return; 
			case TestSuitePackage.TEST_SUITE:
				sequence_TestSuite(context, (TestSuite) semanticObject); 
				return; 
			case TestSuitePackage.TIMEOUT:
				sequence_Timeout(context, (Timeout) semanticObject); 
				return; 
			case TestSuitePackage.UNFORCE:
				sequence_Unforce(context, (Unforce) semanticObject); 
				return; 
			case TestSuitePackage.VALUE:
				sequence_Value(context, (Value) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Step returns Check
	 *     Check returns Check
	 *
	 * Constraint:
	 *     (genericSignal=Signal value=Value productValueExceptions+=ProductValueException* timeout=Timeout)
	 */
	protected void sequence_Check(ISerializationContext context, Check semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Step returns Force
	 *     Force returns Force
	 *
	 * Constraint:
	 *     (genericSignal=Signal value=Value productValueExceptions+=ProductValueException*)
	 */
	protected void sequence_Force(ISerializationContext context, Force semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProductStep returns ProductCheck
	 *     ProductCheck returns ProductCheck
	 *
	 * Constraint:
	 *     (productSignal=Signal system=ID value=Value timeout=Timeout)
	 */
	protected void sequence_ProductCheck(ISerializationContext context, ProductCheck semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TestSuitePackage.Literals.PRODUCT_STEP__PRODUCT_SIGNAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestSuitePackage.Literals.PRODUCT_STEP__PRODUCT_SIGNAL));
			if (transientValues.isValueTransient(semanticObject, TestSuitePackage.Literals.PRODUCT_STEP__SYSTEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestSuitePackage.Literals.PRODUCT_STEP__SYSTEM));
			if (transientValues.isValueTransient(semanticObject, TestSuitePackage.Literals.PRODUCT_CHECK__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestSuitePackage.Literals.PRODUCT_CHECK__VALUE));
			if (transientValues.isValueTransient(semanticObject, TestSuitePackage.Literals.PRODUCT_CHECK__TIMEOUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestSuitePackage.Literals.PRODUCT_CHECK__TIMEOUT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProductCheckAccess().getProductSignalSignalParserRuleCall_3_0(), semanticObject.getProductSignal());
		feeder.accept(grammarAccess.getProductCheckAccess().getSystemIDTerminalRuleCall_6_0(), semanticObject.getSystem());
		feeder.accept(grammarAccess.getProductCheckAccess().getValueValueParserRuleCall_8_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getProductCheckAccess().getTimeoutTimeoutParserRuleCall_10_0(), semanticObject.getTimeout());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ProductException returns ProductException
	 *
	 * Constraint:
	 *     productName=ID
	 */
	protected void sequence_ProductException(ISerializationContext context, ProductException semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TestSuitePackage.Literals.PRODUCT_EXCEPTION__PRODUCT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestSuitePackage.Literals.PRODUCT_EXCEPTION__PRODUCT_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProductExceptionAccess().getProductNameIDTerminalRuleCall_2_0(), semanticObject.getProductName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ProductStep returns ProductForce
	 *     ProductForce returns ProductForce
	 *
	 * Constraint:
	 *     (productSignal=Signal system=ID value=Value)
	 */
	protected void sequence_ProductForce(ISerializationContext context, ProductForce semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TestSuitePackage.Literals.PRODUCT_STEP__PRODUCT_SIGNAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestSuitePackage.Literals.PRODUCT_STEP__PRODUCT_SIGNAL));
			if (transientValues.isValueTransient(semanticObject, TestSuitePackage.Literals.PRODUCT_STEP__SYSTEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestSuitePackage.Literals.PRODUCT_STEP__SYSTEM));
			if (transientValues.isValueTransient(semanticObject, TestSuitePackage.Literals.PRODUCT_FORCE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestSuitePackage.Literals.PRODUCT_FORCE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProductForceAccess().getProductSignalSignalParserRuleCall_3_0(), semanticObject.getProductSignal());
		feeder.accept(grammarAccess.getProductForceAccess().getSystemIDTerminalRuleCall_6_0(), semanticObject.getSystem());
		feeder.accept(grammarAccess.getProductForceAccess().getValueValueParserRuleCall_8_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ProductStep returns ProductSet
	 *     ProductSet returns ProductSet
	 *
	 * Constraint:
	 *     (productSignal=Signal system=ID value=Value)
	 */
	protected void sequence_ProductSet(ISerializationContext context, ProductSet semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TestSuitePackage.Literals.PRODUCT_STEP__PRODUCT_SIGNAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestSuitePackage.Literals.PRODUCT_STEP__PRODUCT_SIGNAL));
			if (transientValues.isValueTransient(semanticObject, TestSuitePackage.Literals.PRODUCT_STEP__SYSTEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestSuitePackage.Literals.PRODUCT_STEP__SYSTEM));
			if (transientValues.isValueTransient(semanticObject, TestSuitePackage.Literals.PRODUCT_SET__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestSuitePackage.Literals.PRODUCT_SET__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProductSetAccess().getProductSignalSignalParserRuleCall_3_0(), semanticObject.getProductSignal());
		feeder.accept(grammarAccess.getProductSetAccess().getSystemIDTerminalRuleCall_6_0(), semanticObject.getSystem());
		feeder.accept(grammarAccess.getProductSetAccess().getValueValueParserRuleCall_8_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ProductTestCase returns ProductTestCase
	 *
	 * Constraint:
	 *     (name=ID productName=ID productSteps+=ProductStep*)
	 */
	protected void sequence_ProductTestCase(ISerializationContext context, ProductTestCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProductStep returns ProductUnforce
	 *     ProductUnforce returns ProductUnforce
	 *
	 * Constraint:
	 *     (productSignal=Signal system=ID)
	 */
	protected void sequence_ProductUnforce(ISerializationContext context, ProductUnforce semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TestSuitePackage.Literals.PRODUCT_STEP__PRODUCT_SIGNAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestSuitePackage.Literals.PRODUCT_STEP__PRODUCT_SIGNAL));
			if (transientValues.isValueTransient(semanticObject, TestSuitePackage.Literals.PRODUCT_STEP__SYSTEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestSuitePackage.Literals.PRODUCT_STEP__SYSTEM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProductUnforceAccess().getProductSignalSignalParserRuleCall_3_0(), semanticObject.getProductSignal());
		feeder.accept(grammarAccess.getProductUnforceAccess().getSystemIDTerminalRuleCall_6_0(), semanticObject.getSystem());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ProductValueException returns ProductValueException
	 *
	 * Constraint:
	 *     (productName=ID productValue=ValueType)
	 */
	protected void sequence_ProductValueException(ISerializationContext context, ProductValueException semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TestSuitePackage.Literals.PRODUCT_VALUE_EXCEPTION__PRODUCT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestSuitePackage.Literals.PRODUCT_VALUE_EXCEPTION__PRODUCT_NAME));
			if (transientValues.isValueTransient(semanticObject, TestSuitePackage.Literals.PRODUCT_VALUE_EXCEPTION__PRODUCT_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestSuitePackage.Literals.PRODUCT_VALUE_EXCEPTION__PRODUCT_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProductValueExceptionAccess().getProductNameIDTerminalRuleCall_3_0(), semanticObject.getProductName());
		feeder.accept(grammarAccess.getProductValueExceptionAccess().getProductValueValueTypeParserRuleCall_5_0(), semanticObject.getProductValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Step returns Set
	 *     Set returns Set
	 *
	 * Constraint:
	 *     (genericSignal=Signal value=Value productValueExceptions+=ProductValueException*)
	 */
	protected void sequence_Set(ISerializationContext context, se.mdh.dva501.testsuite.testSuite.Set semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Signal returns Signal
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Signal(ISerializationContext context, Signal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TestSuitePackage.Literals.SIGNAL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestSuitePackage.Literals.SIGNAL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TestCase returns TestCase
	 *
	 * Constraint:
	 *     (name=ID genericFunction=ID productException+=ProductException* steps+=Step*)
	 */
	protected void sequence_TestCase(ISerializationContext context, TestCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TestSuite returns TestSuite
	 *
	 * Constraint:
	 *     ((testCases+=TestCase+ productTestCases+=ProductTestCase+) | productTestCases+=ProductTestCase+)?
	 */
	protected void sequence_TestSuite(ISerializationContext context, TestSuite semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Timeout returns Timeout
	 *
	 * Constraint:
	 *     name=INT
	 */
	protected void sequence_Timeout(ISerializationContext context, Timeout semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TestSuitePackage.Literals.TIMEOUT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestSuitePackage.Literals.TIMEOUT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeoutAccess().getNameINTTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Step returns Unforce
	 *     Unforce returns Unforce
	 *
	 * Constraint:
	 *     genericSignal=Signal
	 */
	protected void sequence_Unforce(ISerializationContext context, Unforce semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TestSuitePackage.Literals.STEP__GENERIC_SIGNAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestSuitePackage.Literals.STEP__GENERIC_SIGNAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUnforceAccess().getGenericSignalSignalParserRuleCall_2_0(), semanticObject.getGenericSignal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns Value
	 *
	 * Constraint:
	 *     name=ValueType
	 */
	protected void sequence_Value(ISerializationContext context, Value semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TestSuitePackage.Literals.VALUE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TestSuitePackage.Literals.VALUE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValueAccess().getNameValueTypeParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
