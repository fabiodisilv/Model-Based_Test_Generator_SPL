/**
 * generated by Xtext 2.21.0
 */
package se.mdh.dva501.testsuite.testSuite.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import se.mdh.dva501.testsuite.testSuite.Check;
import se.mdh.dva501.testsuite.testSuite.ProductValueException;
import se.mdh.dva501.testsuite.testSuite.TestSuitePackage;
import se.mdh.dva501.testsuite.testSuite.Timeout;
import se.mdh.dva501.testsuite.testSuite.Value;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Check</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link se.mdh.dva501.testsuite.testSuite.impl.CheckImpl#getValue <em>Value</em>}</li>
 *   <li>{@link se.mdh.dva501.testsuite.testSuite.impl.CheckImpl#getProductValueExceptions <em>Product Value Exceptions</em>}</li>
 *   <li>{@link se.mdh.dva501.testsuite.testSuite.impl.CheckImpl#getTimeout <em>Timeout</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CheckImpl extends StepImpl implements Check
{
  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected Value value;

  /**
   * The cached value of the '{@link #getProductValueExceptions() <em>Product Value Exceptions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProductValueExceptions()
   * @generated
   * @ordered
   */
  protected EList<ProductValueException> productValueExceptions;

  /**
   * The cached value of the '{@link #getTimeout() <em>Timeout</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeout()
   * @generated
   * @ordered
   */
  protected Timeout timeout;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CheckImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TestSuitePackage.Literals.CHECK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetValue(Value newValue, NotificationChain msgs)
  {
    Value oldValue = value;
    value = newValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TestSuitePackage.CHECK__VALUE, oldValue, newValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValue(Value newValue)
  {
    if (newValue != value)
    {
      NotificationChain msgs = null;
      if (value != null)
        msgs = ((InternalEObject)value).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TestSuitePackage.CHECK__VALUE, null, msgs);
      if (newValue != null)
        msgs = ((InternalEObject)newValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TestSuitePackage.CHECK__VALUE, null, msgs);
      msgs = basicSetValue(newValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestSuitePackage.CHECK__VALUE, newValue, newValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ProductValueException> getProductValueExceptions()
  {
    if (productValueExceptions == null)
    {
      productValueExceptions = new EObjectContainmentEList<ProductValueException>(ProductValueException.class, this, TestSuitePackage.CHECK__PRODUCT_VALUE_EXCEPTIONS);
    }
    return productValueExceptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Timeout getTimeout()
  {
    return timeout;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTimeout(Timeout newTimeout, NotificationChain msgs)
  {
    Timeout oldTimeout = timeout;
    timeout = newTimeout;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TestSuitePackage.CHECK__TIMEOUT, oldTimeout, newTimeout);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTimeout(Timeout newTimeout)
  {
    if (newTimeout != timeout)
    {
      NotificationChain msgs = null;
      if (timeout != null)
        msgs = ((InternalEObject)timeout).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TestSuitePackage.CHECK__TIMEOUT, null, msgs);
      if (newTimeout != null)
        msgs = ((InternalEObject)newTimeout).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TestSuitePackage.CHECK__TIMEOUT, null, msgs);
      msgs = basicSetTimeout(newTimeout, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestSuitePackage.CHECK__TIMEOUT, newTimeout, newTimeout));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TestSuitePackage.CHECK__VALUE:
        return basicSetValue(null, msgs);
      case TestSuitePackage.CHECK__PRODUCT_VALUE_EXCEPTIONS:
        return ((InternalEList<?>)getProductValueExceptions()).basicRemove(otherEnd, msgs);
      case TestSuitePackage.CHECK__TIMEOUT:
        return basicSetTimeout(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TestSuitePackage.CHECK__VALUE:
        return getValue();
      case TestSuitePackage.CHECK__PRODUCT_VALUE_EXCEPTIONS:
        return getProductValueExceptions();
      case TestSuitePackage.CHECK__TIMEOUT:
        return getTimeout();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TestSuitePackage.CHECK__VALUE:
        setValue((Value)newValue);
        return;
      case TestSuitePackage.CHECK__PRODUCT_VALUE_EXCEPTIONS:
        getProductValueExceptions().clear();
        getProductValueExceptions().addAll((Collection<? extends ProductValueException>)newValue);
        return;
      case TestSuitePackage.CHECK__TIMEOUT:
        setTimeout((Timeout)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TestSuitePackage.CHECK__VALUE:
        setValue((Value)null);
        return;
      case TestSuitePackage.CHECK__PRODUCT_VALUE_EXCEPTIONS:
        getProductValueExceptions().clear();
        return;
      case TestSuitePackage.CHECK__TIMEOUT:
        setTimeout((Timeout)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TestSuitePackage.CHECK__VALUE:
        return value != null;
      case TestSuitePackage.CHECK__PRODUCT_VALUE_EXCEPTIONS:
        return productValueExceptions != null && !productValueExceptions.isEmpty();
      case TestSuitePackage.CHECK__TIMEOUT:
        return timeout != null;
    }
    return super.eIsSet(featureID);
  }

} //CheckImpl
