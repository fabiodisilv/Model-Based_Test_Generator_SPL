/**
 * generated by Xtext 2.21.0
 */
package se.mdh.dva501.testsuite.testSuite.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import se.mdh.dva501.testsuite.testSuite.ProductException;
import se.mdh.dva501.testsuite.testSuite.Step;
import se.mdh.dva501.testsuite.testSuite.TestCase;
import se.mdh.dva501.testsuite.testSuite.TestSuitePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Test Case</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link se.mdh.dva501.testsuite.testSuite.impl.TestCaseImpl#getName <em>Name</em>}</li>
 *   <li>{@link se.mdh.dva501.testsuite.testSuite.impl.TestCaseImpl#getGenericFunction <em>Generic Function</em>}</li>
 *   <li>{@link se.mdh.dva501.testsuite.testSuite.impl.TestCaseImpl#getProductException <em>Product Exception</em>}</li>
 *   <li>{@link se.mdh.dva501.testsuite.testSuite.impl.TestCaseImpl#getSteps <em>Steps</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TestCaseImpl extends MinimalEObjectImpl.Container implements TestCase
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getGenericFunction() <em>Generic Function</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGenericFunction()
   * @generated
   * @ordered
   */
  protected static final String GENERIC_FUNCTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGenericFunction() <em>Generic Function</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGenericFunction()
   * @generated
   * @ordered
   */
  protected String genericFunction = GENERIC_FUNCTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getProductException() <em>Product Exception</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProductException()
   * @generated
   * @ordered
   */
  protected EList<ProductException> productException;

  /**
   * The cached value of the '{@link #getSteps() <em>Steps</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSteps()
   * @generated
   * @ordered
   */
  protected EList<Step> steps;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TestCaseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TestSuitePackage.Literals.TEST_CASE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestSuitePackage.TEST_CASE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getGenericFunction()
  {
    return genericFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGenericFunction(String newGenericFunction)
  {
    String oldGenericFunction = genericFunction;
    genericFunction = newGenericFunction;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestSuitePackage.TEST_CASE__GENERIC_FUNCTION, oldGenericFunction, genericFunction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ProductException> getProductException()
  {
    if (productException == null)
    {
      productException = new EObjectContainmentEList<ProductException>(ProductException.class, this, TestSuitePackage.TEST_CASE__PRODUCT_EXCEPTION);
    }
    return productException;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Step> getSteps()
  {
    if (steps == null)
    {
      steps = new EObjectContainmentEList<Step>(Step.class, this, TestSuitePackage.TEST_CASE__STEPS);
    }
    return steps;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TestSuitePackage.TEST_CASE__PRODUCT_EXCEPTION:
        return ((InternalEList<?>)getProductException()).basicRemove(otherEnd, msgs);
      case TestSuitePackage.TEST_CASE__STEPS:
        return ((InternalEList<?>)getSteps()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TestSuitePackage.TEST_CASE__NAME:
        return getName();
      case TestSuitePackage.TEST_CASE__GENERIC_FUNCTION:
        return getGenericFunction();
      case TestSuitePackage.TEST_CASE__PRODUCT_EXCEPTION:
        return getProductException();
      case TestSuitePackage.TEST_CASE__STEPS:
        return getSteps();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TestSuitePackage.TEST_CASE__NAME:
        setName((String)newValue);
        return;
      case TestSuitePackage.TEST_CASE__GENERIC_FUNCTION:
        setGenericFunction((String)newValue);
        return;
      case TestSuitePackage.TEST_CASE__PRODUCT_EXCEPTION:
        getProductException().clear();
        getProductException().addAll((Collection<? extends ProductException>)newValue);
        return;
      case TestSuitePackage.TEST_CASE__STEPS:
        getSteps().clear();
        getSteps().addAll((Collection<? extends Step>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TestSuitePackage.TEST_CASE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case TestSuitePackage.TEST_CASE__GENERIC_FUNCTION:
        setGenericFunction(GENERIC_FUNCTION_EDEFAULT);
        return;
      case TestSuitePackage.TEST_CASE__PRODUCT_EXCEPTION:
        getProductException().clear();
        return;
      case TestSuitePackage.TEST_CASE__STEPS:
        getSteps().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TestSuitePackage.TEST_CASE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case TestSuitePackage.TEST_CASE__GENERIC_FUNCTION:
        return GENERIC_FUNCTION_EDEFAULT == null ? genericFunction != null : !GENERIC_FUNCTION_EDEFAULT.equals(genericFunction);
      case TestSuitePackage.TEST_CASE__PRODUCT_EXCEPTION:
        return productException != null && !productException.isEmpty();
      case TestSuitePackage.TEST_CASE__STEPS:
        return steps != null && !steps.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", genericFunction: ");
    result.append(genericFunction);
    result.append(')');
    return result.toString();
  }

} //TestCaseImpl
