/**
 * generated by Xtext 2.21.0
 */
package se.mdh.dva501.testsuite.testSuite.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import se.mdh.dva501.testsuite.testSuite.ProductTestCase;
import se.mdh.dva501.testsuite.testSuite.TestCase;
import se.mdh.dva501.testsuite.testSuite.TestSuite;
import se.mdh.dva501.testsuite.testSuite.TestSuitePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Test Suite</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link se.mdh.dva501.testsuite.testSuite.impl.TestSuiteImpl#getTestCases <em>Test Cases</em>}</li>
 *   <li>{@link se.mdh.dva501.testsuite.testSuite.impl.TestSuiteImpl#getProductTestCases <em>Product Test Cases</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TestSuiteImpl extends MinimalEObjectImpl.Container implements TestSuite
{
  /**
   * The cached value of the '{@link #getTestCases() <em>Test Cases</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTestCases()
   * @generated
   * @ordered
   */
  protected EList<TestCase> testCases;

  /**
   * The cached value of the '{@link #getProductTestCases() <em>Product Test Cases</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProductTestCases()
   * @generated
   * @ordered
   */
  protected EList<ProductTestCase> productTestCases;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TestSuiteImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TestSuitePackage.Literals.TEST_SUITE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TestCase> getTestCases()
  {
    if (testCases == null)
    {
      testCases = new EObjectContainmentEList<TestCase>(TestCase.class, this, TestSuitePackage.TEST_SUITE__TEST_CASES);
    }
    return testCases;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ProductTestCase> getProductTestCases()
  {
    if (productTestCases == null)
    {
      productTestCases = new EObjectContainmentEList<ProductTestCase>(ProductTestCase.class, this, TestSuitePackage.TEST_SUITE__PRODUCT_TEST_CASES);
    }
    return productTestCases;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TestSuitePackage.TEST_SUITE__TEST_CASES:
        return ((InternalEList<?>)getTestCases()).basicRemove(otherEnd, msgs);
      case TestSuitePackage.TEST_SUITE__PRODUCT_TEST_CASES:
        return ((InternalEList<?>)getProductTestCases()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TestSuitePackage.TEST_SUITE__TEST_CASES:
        return getTestCases();
      case TestSuitePackage.TEST_SUITE__PRODUCT_TEST_CASES:
        return getProductTestCases();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TestSuitePackage.TEST_SUITE__TEST_CASES:
        getTestCases().clear();
        getTestCases().addAll((Collection<? extends TestCase>)newValue);
        return;
      case TestSuitePackage.TEST_SUITE__PRODUCT_TEST_CASES:
        getProductTestCases().clear();
        getProductTestCases().addAll((Collection<? extends ProductTestCase>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TestSuitePackage.TEST_SUITE__TEST_CASES:
        getTestCases().clear();
        return;
      case TestSuitePackage.TEST_SUITE__PRODUCT_TEST_CASES:
        getProductTestCases().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TestSuitePackage.TEST_SUITE__TEST_CASES:
        return testCases != null && !testCases.isEmpty();
      case TestSuitePackage.TEST_SUITE__PRODUCT_TEST_CASES:
        return productTestCases != null && !productTestCases.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //TestSuiteImpl
