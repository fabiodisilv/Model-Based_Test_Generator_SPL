/**
 * generated by Xtext 2.21.0
 */
package se.mdh.dva501.testsuite.testSuite.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import se.mdh.dva501.testsuite.testSuite.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see se.mdh.dva501.testsuite.testSuite.TestSuitePackage
 * @generated
 */
public class TestSuiteAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static TestSuitePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TestSuiteAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = TestSuitePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TestSuiteSwitch<Adapter> modelSwitch =
    new TestSuiteSwitch<Adapter>()
    {
      @Override
      public Adapter caseTestSuite(TestSuite object)
      {
        return createTestSuiteAdapter();
      }
      @Override
      public Adapter caseTestCase(TestCase object)
      {
        return createTestCaseAdapter();
      }
      @Override
      public Adapter caseProductException(ProductException object)
      {
        return createProductExceptionAdapter();
      }
      @Override
      public Adapter caseStep(Step object)
      {
        return createStepAdapter();
      }
      @Override
      public Adapter caseSet(Set object)
      {
        return createSetAdapter();
      }
      @Override
      public Adapter caseForce(Force object)
      {
        return createForceAdapter();
      }
      @Override
      public Adapter caseUnforce(Unforce object)
      {
        return createUnforceAdapter();
      }
      @Override
      public Adapter caseCheck(Check object)
      {
        return createCheckAdapter();
      }
      @Override
      public Adapter caseProductValueException(ProductValueException object)
      {
        return createProductValueExceptionAdapter();
      }
      @Override
      public Adapter caseSignal(Signal object)
      {
        return createSignalAdapter();
      }
      @Override
      public Adapter caseValue(Value object)
      {
        return createValueAdapter();
      }
      @Override
      public Adapter caseTimeout(Timeout object)
      {
        return createTimeoutAdapter();
      }
      @Override
      public Adapter caseProductTestCase(ProductTestCase object)
      {
        return createProductTestCaseAdapter();
      }
      @Override
      public Adapter caseProductStep(ProductStep object)
      {
        return createProductStepAdapter();
      }
      @Override
      public Adapter caseProductSet(ProductSet object)
      {
        return createProductSetAdapter();
      }
      @Override
      public Adapter caseProductForce(ProductForce object)
      {
        return createProductForceAdapter();
      }
      @Override
      public Adapter caseProductUnforce(ProductUnforce object)
      {
        return createProductUnforceAdapter();
      }
      @Override
      public Adapter caseProductCheck(ProductCheck object)
      {
        return createProductCheckAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link se.mdh.dva501.testsuite.testSuite.TestSuite <em>Test Suite</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see se.mdh.dva501.testsuite.testSuite.TestSuite
   * @generated
   */
  public Adapter createTestSuiteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link se.mdh.dva501.testsuite.testSuite.TestCase <em>Test Case</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see se.mdh.dva501.testsuite.testSuite.TestCase
   * @generated
   */
  public Adapter createTestCaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link se.mdh.dva501.testsuite.testSuite.ProductException <em>Product Exception</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see se.mdh.dva501.testsuite.testSuite.ProductException
   * @generated
   */
  public Adapter createProductExceptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link se.mdh.dva501.testsuite.testSuite.Step <em>Step</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see se.mdh.dva501.testsuite.testSuite.Step
   * @generated
   */
  public Adapter createStepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link se.mdh.dva501.testsuite.testSuite.Set <em>Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see se.mdh.dva501.testsuite.testSuite.Set
   * @generated
   */
  public Adapter createSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link se.mdh.dva501.testsuite.testSuite.Force <em>Force</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see se.mdh.dva501.testsuite.testSuite.Force
   * @generated
   */
  public Adapter createForceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link se.mdh.dva501.testsuite.testSuite.Unforce <em>Unforce</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see se.mdh.dva501.testsuite.testSuite.Unforce
   * @generated
   */
  public Adapter createUnforceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link se.mdh.dva501.testsuite.testSuite.Check <em>Check</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see se.mdh.dva501.testsuite.testSuite.Check
   * @generated
   */
  public Adapter createCheckAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link se.mdh.dva501.testsuite.testSuite.ProductValueException <em>Product Value Exception</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see se.mdh.dva501.testsuite.testSuite.ProductValueException
   * @generated
   */
  public Adapter createProductValueExceptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link se.mdh.dva501.testsuite.testSuite.Signal <em>Signal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see se.mdh.dva501.testsuite.testSuite.Signal
   * @generated
   */
  public Adapter createSignalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link se.mdh.dva501.testsuite.testSuite.Value <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see se.mdh.dva501.testsuite.testSuite.Value
   * @generated
   */
  public Adapter createValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link se.mdh.dva501.testsuite.testSuite.Timeout <em>Timeout</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see se.mdh.dva501.testsuite.testSuite.Timeout
   * @generated
   */
  public Adapter createTimeoutAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link se.mdh.dva501.testsuite.testSuite.ProductTestCase <em>Product Test Case</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see se.mdh.dva501.testsuite.testSuite.ProductTestCase
   * @generated
   */
  public Adapter createProductTestCaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link se.mdh.dva501.testsuite.testSuite.ProductStep <em>Product Step</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see se.mdh.dva501.testsuite.testSuite.ProductStep
   * @generated
   */
  public Adapter createProductStepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link se.mdh.dva501.testsuite.testSuite.ProductSet <em>Product Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see se.mdh.dva501.testsuite.testSuite.ProductSet
   * @generated
   */
  public Adapter createProductSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link se.mdh.dva501.testsuite.testSuite.ProductForce <em>Product Force</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see se.mdh.dva501.testsuite.testSuite.ProductForce
   * @generated
   */
  public Adapter createProductForceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link se.mdh.dva501.testsuite.testSuite.ProductUnforce <em>Product Unforce</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see se.mdh.dva501.testsuite.testSuite.ProductUnforce
   * @generated
   */
  public Adapter createProductUnforceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link se.mdh.dva501.testsuite.testSuite.ProductCheck <em>Product Check</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see se.mdh.dva501.testsuite.testSuite.ProductCheck
   * @generated
   */
  public Adapter createProductCheckAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //TestSuiteAdapterFactory
