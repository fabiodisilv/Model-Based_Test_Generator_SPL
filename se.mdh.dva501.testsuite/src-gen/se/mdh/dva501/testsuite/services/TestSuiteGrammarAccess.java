/*
 * generated by Xtext 2.21.0
 */
package se.mdh.dva501.testsuite.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TestSuiteGrammarAccess extends AbstractGrammarElementFinder {
	
	public class TestSuiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.mdh.dva501.testsuite.TestSuite.TestSuite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTestCasesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTestCasesTestCaseParserRuleCall_0_0 = (RuleCall)cTestCasesAssignment_0.eContents().get(0);
		private final Assignment cProductTestCasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProductTestCasesProductTestCaseParserRuleCall_1_0 = (RuleCall)cProductTestCasesAssignment_1.eContents().get(0);
		
		//TestSuite:
		//	testCases+=TestCase* productTestCases+=ProductTestCase*;
		@Override public ParserRule getRule() { return rule; }
		
		//testCases+=TestCase* productTestCases+=ProductTestCase*
		public Group getGroup() { return cGroup; }
		
		//testCases+=TestCase*
		public Assignment getTestCasesAssignment_0() { return cTestCasesAssignment_0; }
		
		//TestCase
		public RuleCall getTestCasesTestCaseParserRuleCall_0_0() { return cTestCasesTestCaseParserRuleCall_0_0; }
		
		//productTestCases+=ProductTestCase*
		public Assignment getProductTestCasesAssignment_1() { return cProductTestCasesAssignment_1; }
		
		//ProductTestCase
		public RuleCall getProductTestCasesProductTestCaseParserRuleCall_1_0() { return cProductTestCasesProductTestCaseParserRuleCall_1_0; }
	}
	public class TestCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.mdh.dva501.testsuite.TestSuite.TestCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cChecksKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGenericFunctionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGenericFunctionIDTerminalRuleCall_3_0 = (RuleCall)cGenericFunctionAssignment_3.eContents().get(0);
		private final Assignment cProductExceptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProductExceptionProductExceptionParserRuleCall_4_0 = (RuleCall)cProductExceptionAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStepsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStepsStepParserRuleCall_6_0 = (RuleCall)cStepsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//TestCase:
		//	'TestCase' name=ID 'checks' genericFunction=ID productException+=ProductException* '{'
		//	steps+=Step*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'TestCase' name=ID 'checks' genericFunction=ID productException+=ProductException* '{' steps+=Step* '}'
		public Group getGroup() { return cGroup; }
		
		//'TestCase'
		public Keyword getTestCaseKeyword_0() { return cTestCaseKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'checks'
		public Keyword getChecksKeyword_2() { return cChecksKeyword_2; }
		
		//genericFunction=ID
		public Assignment getGenericFunctionAssignment_3() { return cGenericFunctionAssignment_3; }
		
		//ID
		public RuleCall getGenericFunctionIDTerminalRuleCall_3_0() { return cGenericFunctionIDTerminalRuleCall_3_0; }
		
		//productException+=ProductException*
		public Assignment getProductExceptionAssignment_4() { return cProductExceptionAssignment_4; }
		
		//ProductException
		public RuleCall getProductExceptionProductExceptionParserRuleCall_4_0() { return cProductExceptionProductExceptionParserRuleCall_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//steps+=Step*
		public Assignment getStepsAssignment_6() { return cStepsAssignment_6; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_6_0() { return cStepsStepParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ProductExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.mdh.dva501.testsuite.TestSuite.ProductException");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExceptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProductKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProductNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProductNameIDTerminalRuleCall_2_0 = (RuleCall)cProductNameAssignment_2.eContents().get(0);
		
		//ProductException:
		//	'except' 'Product' productName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'except' 'Product' productName=ID
		public Group getGroup() { return cGroup; }
		
		//'except'
		public Keyword getExceptKeyword_0() { return cExceptKeyword_0; }
		
		//'Product'
		public Keyword getProductKeyword_1() { return cProductKeyword_1; }
		
		//productName=ID
		public Assignment getProductNameAssignment_2() { return cProductNameAssignment_2; }
		
		//ID
		public RuleCall getProductNameIDTerminalRuleCall_2_0() { return cProductNameIDTerminalRuleCall_2_0; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.mdh.dva501.testsuite.TestSuite.Step");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCheckParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnforceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Step:
		//	Set | Check | Force | Unforce;
		@Override public ParserRule getRule() { return rule; }
		
		//Set | Check | Force | Unforce
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Set
		public RuleCall getSetParserRuleCall_0() { return cSetParserRuleCall_0; }
		
		//Check
		public RuleCall getCheckParserRuleCall_1() { return cCheckParserRuleCall_1; }
		
		//Force
		public RuleCall getForceParserRuleCall_2() { return cForceParserRuleCall_2; }
		
		//Unforce
		public RuleCall getUnforceParserRuleCall_3() { return cUnforceParserRuleCall_3; }
	}
	public class SetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.mdh.dva501.testsuite.TestSuite.Set");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSignalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGenericSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGenericSignalSignalParserRuleCall_2_0 = (RuleCall)cGenericSignalAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Assignment cProductValueExceptionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cProductValueExceptionsProductValueExceptionParserRuleCall_5_0 = (RuleCall)cProductValueExceptionsAssignment_5.eContents().get(0);
		
		//Set:
		//	'Set' 'Signal' genericSignal=Signal 'to' value=Value productValueExceptions+=ProductValueException*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Set' 'Signal' genericSignal=Signal 'to' value=Value productValueExceptions+=ProductValueException*
		public Group getGroup() { return cGroup; }
		
		//'Set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//'Signal'
		public Keyword getSignalKeyword_1() { return cSignalKeyword_1; }
		
		//genericSignal=Signal
		public Assignment getGenericSignalAssignment_2() { return cGenericSignalAssignment_2; }
		
		//Signal
		public RuleCall getGenericSignalSignalParserRuleCall_2_0() { return cGenericSignalSignalParserRuleCall_2_0; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//value=Value
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_4_0() { return cValueValueParserRuleCall_4_0; }
		
		//productValueExceptions+=ProductValueException*
		public Assignment getProductValueExceptionsAssignment_5() { return cProductValueExceptionsAssignment_5; }
		
		//ProductValueException
		public RuleCall getProductValueExceptionsProductValueExceptionParserRuleCall_5_0() { return cProductValueExceptionsProductValueExceptionParserRuleCall_5_0; }
	}
	public class ForceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.mdh.dva501.testsuite.TestSuite.Force");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSignalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGenericSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGenericSignalSignalParserRuleCall_2_0 = (RuleCall)cGenericSignalAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Assignment cProductValueExceptionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cProductValueExceptionsProductValueExceptionParserRuleCall_5_0 = (RuleCall)cProductValueExceptionsAssignment_5.eContents().get(0);
		
		//Force:
		//	'Force' 'Signal' genericSignal=Signal 'to' value=Value productValueExceptions+=ProductValueException*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Force' 'Signal' genericSignal=Signal 'to' value=Value productValueExceptions+=ProductValueException*
		public Group getGroup() { return cGroup; }
		
		//'Force'
		public Keyword getForceKeyword_0() { return cForceKeyword_0; }
		
		//'Signal'
		public Keyword getSignalKeyword_1() { return cSignalKeyword_1; }
		
		//genericSignal=Signal
		public Assignment getGenericSignalAssignment_2() { return cGenericSignalAssignment_2; }
		
		//Signal
		public RuleCall getGenericSignalSignalParserRuleCall_2_0() { return cGenericSignalSignalParserRuleCall_2_0; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//value=Value
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_4_0() { return cValueValueParserRuleCall_4_0; }
		
		//productValueExceptions+=ProductValueException*
		public Assignment getProductValueExceptionsAssignment_5() { return cProductValueExceptionsAssignment_5; }
		
		//ProductValueException
		public RuleCall getProductValueExceptionsProductValueExceptionParserRuleCall_5_0() { return cProductValueExceptionsProductValueExceptionParserRuleCall_5_0; }
	}
	public class UnforceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.mdh.dva501.testsuite.TestSuite.Unforce");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnforceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSignalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGenericSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGenericSignalSignalParserRuleCall_2_0 = (RuleCall)cGenericSignalAssignment_2.eContents().get(0);
		
		//Unforce:
		//	'Unforce' 'Signal' genericSignal=Signal;
		@Override public ParserRule getRule() { return rule; }
		
		//'Unforce' 'Signal' genericSignal=Signal
		public Group getGroup() { return cGroup; }
		
		//'Unforce'
		public Keyword getUnforceKeyword_0() { return cUnforceKeyword_0; }
		
		//'Signal'
		public Keyword getSignalKeyword_1() { return cSignalKeyword_1; }
		
		//genericSignal=Signal
		public Assignment getGenericSignalAssignment_2() { return cGenericSignalAssignment_2; }
		
		//Signal
		public RuleCall getGenericSignalSignalParserRuleCall_2_0() { return cGenericSignalSignalParserRuleCall_2_0; }
	}
	public class CheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.mdh.dva501.testsuite.TestSuite.Check");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSignalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGenericSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGenericSignalSignalParserRuleCall_2_0 = (RuleCall)cGenericSignalAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Assignment cProductValueExceptionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cProductValueExceptionsProductValueExceptionParserRuleCall_5_0 = (RuleCall)cProductValueExceptionsAssignment_5.eContents().get(0);
		private final Keyword cTimeoutKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTimeoutAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTimeoutTimeoutParserRuleCall_7_0 = (RuleCall)cTimeoutAssignment_7.eContents().get(0);
		
		//Check:
		//	'Check' 'Signal' genericSignal=Signal 'to' value=Value productValueExceptions+=ProductValueException* 'timeout'
		//	timeout=Timeout;
		@Override public ParserRule getRule() { return rule; }
		
		//'Check' 'Signal' genericSignal=Signal 'to' value=Value productValueExceptions+=ProductValueException* 'timeout'
		//timeout=Timeout
		public Group getGroup() { return cGroup; }
		
		//'Check'
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }
		
		//'Signal'
		public Keyword getSignalKeyword_1() { return cSignalKeyword_1; }
		
		//genericSignal=Signal
		public Assignment getGenericSignalAssignment_2() { return cGenericSignalAssignment_2; }
		
		//Signal
		public RuleCall getGenericSignalSignalParserRuleCall_2_0() { return cGenericSignalSignalParserRuleCall_2_0; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//value=Value
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_4_0() { return cValueValueParserRuleCall_4_0; }
		
		//productValueExceptions+=ProductValueException*
		public Assignment getProductValueExceptionsAssignment_5() { return cProductValueExceptionsAssignment_5; }
		
		//ProductValueException
		public RuleCall getProductValueExceptionsProductValueExceptionParserRuleCall_5_0() { return cProductValueExceptionsProductValueExceptionParserRuleCall_5_0; }
		
		//'timeout'
		public Keyword getTimeoutKeyword_6() { return cTimeoutKeyword_6; }
		
		//timeout=Timeout
		public Assignment getTimeoutAssignment_7() { return cTimeoutAssignment_7; }
		
		//Timeout
		public RuleCall getTimeoutTimeoutParserRuleCall_7_0() { return cTimeoutTimeoutParserRuleCall_7_0; }
	}
	public class ProductValueExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.mdh.dva501.testsuite.TestSuite.ProductValueException");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cExceptionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cProductKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProductNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProductNameIDTerminalRuleCall_3_0 = (RuleCall)cProductNameAssignment_3.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cProductValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cProductValueValueTypeParserRuleCall_5_0 = (RuleCall)cProductValueAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ProductValueException:
		//	'(' 'Exception' 'Product' productName=ID 'to' productValue=ValueType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'Exception' 'Product' productName=ID 'to' productValue=ValueType ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'Exception'
		public Keyword getExceptionKeyword_1() { return cExceptionKeyword_1; }
		
		//'Product'
		public Keyword getProductKeyword_2() { return cProductKeyword_2; }
		
		//productName=ID
		public Assignment getProductNameAssignment_3() { return cProductNameAssignment_3; }
		
		//ID
		public RuleCall getProductNameIDTerminalRuleCall_3_0() { return cProductNameIDTerminalRuleCall_3_0; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//productValue=ValueType
		public Assignment getProductValueAssignment_5() { return cProductValueAssignment_5; }
		
		//ValueType
		public RuleCall getProductValueValueTypeParserRuleCall_5_0() { return cProductValueValueTypeParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.mdh.dva501.testsuite.TestSuite.Signal");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Signal:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.mdh.dva501.testsuite.TestSuite.Value");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameValueTypeParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Value:
		//	name=ValueType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ValueType
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ValueType
		public RuleCall getNameValueTypeParserRuleCall_0() { return cNameValueTypeParserRuleCall_0; }
	}
	public class TimeoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.mdh.dva501.testsuite.TestSuite.Timeout");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameINTTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Timeout:
		//	name=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name=INT
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//INT
		public RuleCall getNameINTTerminalRuleCall_0() { return cNameINTTerminalRuleCall_0; }
	}
	public class ValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.mdh.dva501.testsuite.TestSuite.ValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ValueType:
		//	ID | '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | '-'? INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'-'? INT
		public Group getGroup_1() { return cGroup_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	public class ProductTestCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.mdh.dva501.testsuite.TestSuite.ProductTestCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpecificKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTestCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cForKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cProductKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cProductNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cProductNameIDTerminalRuleCall_5_0 = (RuleCall)cProductNameAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cProductStepsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cProductStepsProductStepParserRuleCall_7_0 = (RuleCall)cProductStepsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ProductTestCase:
		//	'Specific' 'TestCase' name=ID 'for' 'product' productName=ID '{'
		//	productSteps+=ProductStep*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Specific' 'TestCase' name=ID 'for' 'product' productName=ID '{' productSteps+=ProductStep* '}'
		public Group getGroup() { return cGroup; }
		
		//'Specific'
		public Keyword getSpecificKeyword_0() { return cSpecificKeyword_0; }
		
		//'TestCase'
		public Keyword getTestCaseKeyword_1() { return cTestCaseKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'for'
		public Keyword getForKeyword_3() { return cForKeyword_3; }
		
		//'product'
		public Keyword getProductKeyword_4() { return cProductKeyword_4; }
		
		//productName=ID
		public Assignment getProductNameAssignment_5() { return cProductNameAssignment_5; }
		
		//ID
		public RuleCall getProductNameIDTerminalRuleCall_5_0() { return cProductNameIDTerminalRuleCall_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//productSteps+=ProductStep*
		public Assignment getProductStepsAssignment_7() { return cProductStepsAssignment_7; }
		
		//ProductStep
		public RuleCall getProductStepsProductStepParserRuleCall_7_0() { return cProductStepsProductStepParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ProductStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.mdh.dva501.testsuite.TestSuite.ProductStep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProductSetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProductCheckParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProductForceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cProductUnforceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ProductStep:
		//	ProductSet | ProductCheck | ProductForce | ProductUnforce;
		@Override public ParserRule getRule() { return rule; }
		
		//ProductSet | ProductCheck | ProductForce | ProductUnforce
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ProductSet
		public RuleCall getProductSetParserRuleCall_0() { return cProductSetParserRuleCall_0; }
		
		//ProductCheck
		public RuleCall getProductCheckParserRuleCall_1() { return cProductCheckParserRuleCall_1; }
		
		//ProductForce
		public RuleCall getProductForceParserRuleCall_2() { return cProductForceParserRuleCall_2; }
		
		//ProductUnforce
		public RuleCall getProductUnforceParserRuleCall_3() { return cProductUnforceParserRuleCall_3; }
	}
	public class ProductSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.mdh.dva501.testsuite.TestSuite.ProductSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProductKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSignalKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProductSignalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProductSignalSignalParserRuleCall_3_0 = (RuleCall)cProductSignalAssignment_3.eContents().get(0);
		private final Keyword cOnKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSystemKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSystemAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSystemIDTerminalRuleCall_6_0 = (RuleCall)cSystemAssignment_6.eContents().get(0);
		private final Keyword cToKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cValueAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cValueValueParserRuleCall_8_0 = (RuleCall)cValueAssignment_8.eContents().get(0);
		
		//ProductSet:
		//	'Set' 'Product' 'Signal' productSignal=Signal 'on' 'System' system=ID 'to' value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//'Set' 'Product' 'Signal' productSignal=Signal 'on' 'System' system=ID 'to' value=Value
		public Group getGroup() { return cGroup; }
		
		//'Set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//'Product'
		public Keyword getProductKeyword_1() { return cProductKeyword_1; }
		
		//'Signal'
		public Keyword getSignalKeyword_2() { return cSignalKeyword_2; }
		
		//productSignal=Signal
		public Assignment getProductSignalAssignment_3() { return cProductSignalAssignment_3; }
		
		//Signal
		public RuleCall getProductSignalSignalParserRuleCall_3_0() { return cProductSignalSignalParserRuleCall_3_0; }
		
		//'on'
		public Keyword getOnKeyword_4() { return cOnKeyword_4; }
		
		//'System'
		public Keyword getSystemKeyword_5() { return cSystemKeyword_5; }
		
		//system=ID
		public Assignment getSystemAssignment_6() { return cSystemAssignment_6; }
		
		//ID
		public RuleCall getSystemIDTerminalRuleCall_6_0() { return cSystemIDTerminalRuleCall_6_0; }
		
		//'to'
		public Keyword getToKeyword_7() { return cToKeyword_7; }
		
		//value=Value
		public Assignment getValueAssignment_8() { return cValueAssignment_8; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_8_0() { return cValueValueParserRuleCall_8_0; }
	}
	public class ProductForceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.mdh.dva501.testsuite.TestSuite.ProductForce");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProductKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSignalKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProductSignalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProductSignalSignalParserRuleCall_3_0 = (RuleCall)cProductSignalAssignment_3.eContents().get(0);
		private final Keyword cOnKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSystemKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSystemAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSystemIDTerminalRuleCall_6_0 = (RuleCall)cSystemAssignment_6.eContents().get(0);
		private final Keyword cToKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cValueAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cValueValueParserRuleCall_8_0 = (RuleCall)cValueAssignment_8.eContents().get(0);
		
		//ProductForce:
		//	'Force' 'Product' 'Signal' productSignal=Signal 'on' 'System' system=ID 'to' value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//'Force' 'Product' 'Signal' productSignal=Signal 'on' 'System' system=ID 'to' value=Value
		public Group getGroup() { return cGroup; }
		
		//'Force'
		public Keyword getForceKeyword_0() { return cForceKeyword_0; }
		
		//'Product'
		public Keyword getProductKeyword_1() { return cProductKeyword_1; }
		
		//'Signal'
		public Keyword getSignalKeyword_2() { return cSignalKeyword_2; }
		
		//productSignal=Signal
		public Assignment getProductSignalAssignment_3() { return cProductSignalAssignment_3; }
		
		//Signal
		public RuleCall getProductSignalSignalParserRuleCall_3_0() { return cProductSignalSignalParserRuleCall_3_0; }
		
		//'on'
		public Keyword getOnKeyword_4() { return cOnKeyword_4; }
		
		//'System'
		public Keyword getSystemKeyword_5() { return cSystemKeyword_5; }
		
		//system=ID
		public Assignment getSystemAssignment_6() { return cSystemAssignment_6; }
		
		//ID
		public RuleCall getSystemIDTerminalRuleCall_6_0() { return cSystemIDTerminalRuleCall_6_0; }
		
		//'to'
		public Keyword getToKeyword_7() { return cToKeyword_7; }
		
		//value=Value
		public Assignment getValueAssignment_8() { return cValueAssignment_8; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_8_0() { return cValueValueParserRuleCall_8_0; }
	}
	public class ProductUnforceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.mdh.dva501.testsuite.TestSuite.ProductUnforce");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnforceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProductKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSignalKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProductSignalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProductSignalSignalParserRuleCall_3_0 = (RuleCall)cProductSignalAssignment_3.eContents().get(0);
		private final Keyword cOnKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSystemKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSystemAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSystemIDTerminalRuleCall_6_0 = (RuleCall)cSystemAssignment_6.eContents().get(0);
		
		//ProductUnforce:
		//	'Unforce' 'Product' 'Signal' productSignal=Signal 'on' 'System' system=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Unforce' 'Product' 'Signal' productSignal=Signal 'on' 'System' system=ID
		public Group getGroup() { return cGroup; }
		
		//'Unforce'
		public Keyword getUnforceKeyword_0() { return cUnforceKeyword_0; }
		
		//'Product'
		public Keyword getProductKeyword_1() { return cProductKeyword_1; }
		
		//'Signal'
		public Keyword getSignalKeyword_2() { return cSignalKeyword_2; }
		
		//productSignal=Signal
		public Assignment getProductSignalAssignment_3() { return cProductSignalAssignment_3; }
		
		//Signal
		public RuleCall getProductSignalSignalParserRuleCall_3_0() { return cProductSignalSignalParserRuleCall_3_0; }
		
		//'on'
		public Keyword getOnKeyword_4() { return cOnKeyword_4; }
		
		//'System'
		public Keyword getSystemKeyword_5() { return cSystemKeyword_5; }
		
		//system=ID
		public Assignment getSystemAssignment_6() { return cSystemAssignment_6; }
		
		//ID
		public RuleCall getSystemIDTerminalRuleCall_6_0() { return cSystemIDTerminalRuleCall_6_0; }
	}
	public class ProductCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.mdh.dva501.testsuite.TestSuite.ProductCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProductKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSignalKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProductSignalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProductSignalSignalParserRuleCall_3_0 = (RuleCall)cProductSignalAssignment_3.eContents().get(0);
		private final Keyword cOnKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSystemKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSystemAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSystemIDTerminalRuleCall_6_0 = (RuleCall)cSystemAssignment_6.eContents().get(0);
		private final Keyword cToKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cValueAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cValueValueParserRuleCall_8_0 = (RuleCall)cValueAssignment_8.eContents().get(0);
		private final Keyword cTimeoutKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cTimeoutAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cTimeoutTimeoutParserRuleCall_10_0 = (RuleCall)cTimeoutAssignment_10.eContents().get(0);
		
		//ProductCheck:
		//	'Check' 'Product' 'Signal' productSignal=Signal 'on' 'System' system=ID 'to' value=Value 'timeout' timeout=Timeout;
		@Override public ParserRule getRule() { return rule; }
		
		//'Check' 'Product' 'Signal' productSignal=Signal 'on' 'System' system=ID 'to' value=Value 'timeout' timeout=Timeout
		public Group getGroup() { return cGroup; }
		
		//'Check'
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }
		
		//'Product'
		public Keyword getProductKeyword_1() { return cProductKeyword_1; }
		
		//'Signal'
		public Keyword getSignalKeyword_2() { return cSignalKeyword_2; }
		
		//productSignal=Signal
		public Assignment getProductSignalAssignment_3() { return cProductSignalAssignment_3; }
		
		//Signal
		public RuleCall getProductSignalSignalParserRuleCall_3_0() { return cProductSignalSignalParserRuleCall_3_0; }
		
		//'on'
		public Keyword getOnKeyword_4() { return cOnKeyword_4; }
		
		//'System'
		public Keyword getSystemKeyword_5() { return cSystemKeyword_5; }
		
		//system=ID
		public Assignment getSystemAssignment_6() { return cSystemAssignment_6; }
		
		//ID
		public RuleCall getSystemIDTerminalRuleCall_6_0() { return cSystemIDTerminalRuleCall_6_0; }
		
		//'to'
		public Keyword getToKeyword_7() { return cToKeyword_7; }
		
		//value=Value
		public Assignment getValueAssignment_8() { return cValueAssignment_8; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_8_0() { return cValueValueParserRuleCall_8_0; }
		
		//'timeout'
		public Keyword getTimeoutKeyword_9() { return cTimeoutKeyword_9; }
		
		//timeout=Timeout
		public Assignment getTimeoutAssignment_10() { return cTimeoutAssignment_10; }
		
		//Timeout
		public RuleCall getTimeoutTimeoutParserRuleCall_10_0() { return cTimeoutTimeoutParserRuleCall_10_0; }
	}
	
	
	private final TestSuiteElements pTestSuite;
	private final TestCaseElements pTestCase;
	private final ProductExceptionElements pProductException;
	private final StepElements pStep;
	private final SetElements pSet;
	private final ForceElements pForce;
	private final UnforceElements pUnforce;
	private final CheckElements pCheck;
	private final ProductValueExceptionElements pProductValueException;
	private final SignalElements pSignal;
	private final ValueElements pValue;
	private final TimeoutElements pTimeout;
	private final ValueTypeElements pValueType;
	private final ProductTestCaseElements pProductTestCase;
	private final ProductStepElements pProductStep;
	private final ProductSetElements pProductSet;
	private final ProductForceElements pProductForce;
	private final ProductUnforceElements pProductUnforce;
	private final ProductCheckElements pProductCheck;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TestSuiteGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTestSuite = new TestSuiteElements();
		this.pTestCase = new TestCaseElements();
		this.pProductException = new ProductExceptionElements();
		this.pStep = new StepElements();
		this.pSet = new SetElements();
		this.pForce = new ForceElements();
		this.pUnforce = new UnforceElements();
		this.pCheck = new CheckElements();
		this.pProductValueException = new ProductValueExceptionElements();
		this.pSignal = new SignalElements();
		this.pValue = new ValueElements();
		this.pTimeout = new TimeoutElements();
		this.pValueType = new ValueTypeElements();
		this.pProductTestCase = new ProductTestCaseElements();
		this.pProductStep = new ProductStepElements();
		this.pProductSet = new ProductSetElements();
		this.pProductForce = new ProductForceElements();
		this.pProductUnforce = new ProductUnforceElements();
		this.pProductCheck = new ProductCheckElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("se.mdh.dva501.testsuite.TestSuite".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TestSuite:
	//	testCases+=TestCase* productTestCases+=ProductTestCase*;
	public TestSuiteElements getTestSuiteAccess() {
		return pTestSuite;
	}
	
	public ParserRule getTestSuiteRule() {
		return getTestSuiteAccess().getRule();
	}
	
	//TestCase:
	//	'TestCase' name=ID 'checks' genericFunction=ID productException+=ProductException* '{'
	//	steps+=Step*
	//	'}';
	public TestCaseElements getTestCaseAccess() {
		return pTestCase;
	}
	
	public ParserRule getTestCaseRule() {
		return getTestCaseAccess().getRule();
	}
	
	//ProductException:
	//	'except' 'Product' productName=ID;
	public ProductExceptionElements getProductExceptionAccess() {
		return pProductException;
	}
	
	public ParserRule getProductExceptionRule() {
		return getProductExceptionAccess().getRule();
	}
	
	//Step:
	//	Set | Check | Force | Unforce;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//Set:
	//	'Set' 'Signal' genericSignal=Signal 'to' value=Value productValueExceptions+=ProductValueException*;
	public SetElements getSetAccess() {
		return pSet;
	}
	
	public ParserRule getSetRule() {
		return getSetAccess().getRule();
	}
	
	//Force:
	//	'Force' 'Signal' genericSignal=Signal 'to' value=Value productValueExceptions+=ProductValueException*;
	public ForceElements getForceAccess() {
		return pForce;
	}
	
	public ParserRule getForceRule() {
		return getForceAccess().getRule();
	}
	
	//Unforce:
	//	'Unforce' 'Signal' genericSignal=Signal;
	public UnforceElements getUnforceAccess() {
		return pUnforce;
	}
	
	public ParserRule getUnforceRule() {
		return getUnforceAccess().getRule();
	}
	
	//Check:
	//	'Check' 'Signal' genericSignal=Signal 'to' value=Value productValueExceptions+=ProductValueException* 'timeout'
	//	timeout=Timeout;
	public CheckElements getCheckAccess() {
		return pCheck;
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}
	
	//ProductValueException:
	//	'(' 'Exception' 'Product' productName=ID 'to' productValue=ValueType ')';
	public ProductValueExceptionElements getProductValueExceptionAccess() {
		return pProductValueException;
	}
	
	public ParserRule getProductValueExceptionRule() {
		return getProductValueExceptionAccess().getRule();
	}
	
	//Signal:
	//	name=ID;
	public SignalElements getSignalAccess() {
		return pSignal;
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}
	
	//Value:
	//	name=ValueType;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Timeout:
	//	name=INT;
	public TimeoutElements getTimeoutAccess() {
		return pTimeout;
	}
	
	public ParserRule getTimeoutRule() {
		return getTimeoutAccess().getRule();
	}
	
	//ValueType:
	//	ID | '-'? INT;
	public ValueTypeElements getValueTypeAccess() {
		return pValueType;
	}
	
	public ParserRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}
	
	//ProductTestCase:
	//	'Specific' 'TestCase' name=ID 'for' 'product' productName=ID '{'
	//	productSteps+=ProductStep*
	//	'}';
	public ProductTestCaseElements getProductTestCaseAccess() {
		return pProductTestCase;
	}
	
	public ParserRule getProductTestCaseRule() {
		return getProductTestCaseAccess().getRule();
	}
	
	//ProductStep:
	//	ProductSet | ProductCheck | ProductForce | ProductUnforce;
	public ProductStepElements getProductStepAccess() {
		return pProductStep;
	}
	
	public ParserRule getProductStepRule() {
		return getProductStepAccess().getRule();
	}
	
	//ProductSet:
	//	'Set' 'Product' 'Signal' productSignal=Signal 'on' 'System' system=ID 'to' value=Value;
	public ProductSetElements getProductSetAccess() {
		return pProductSet;
	}
	
	public ParserRule getProductSetRule() {
		return getProductSetAccess().getRule();
	}
	
	//ProductForce:
	//	'Force' 'Product' 'Signal' productSignal=Signal 'on' 'System' system=ID 'to' value=Value;
	public ProductForceElements getProductForceAccess() {
		return pProductForce;
	}
	
	public ParserRule getProductForceRule() {
		return getProductForceAccess().getRule();
	}
	
	//ProductUnforce:
	//	'Unforce' 'Product' 'Signal' productSignal=Signal 'on' 'System' system=ID;
	public ProductUnforceElements getProductUnforceAccess() {
		return pProductUnforce;
	}
	
	public ParserRule getProductUnforceRule() {
		return getProductUnforceAccess().getRule();
	}
	
	//ProductCheck:
	//	'Check' 'Product' 'Signal' productSignal=Signal 'on' 'System' system=ID 'to' value=Value 'timeout' timeout=Timeout;
	public ProductCheckElements getProductCheckAccess() {
		return pProductCheck;
	}
	
	public ParserRule getProductCheckRule() {
		return getProductCheckAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
